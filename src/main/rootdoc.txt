This is the documentation for the LiCOS's JSON library for Scala.

== Package structure ==

Notable packages includes:

  - [[licos.json.engine]] and its sub-packages contain LiCOS's JSON framework.
    - [[licos.json.engine.BOX `BOX`]] is the container that manages information to give to analysis engines.
    - [[licos.json.engine.processing `licos.json.processing`]] contains LiCOS's JSON processing engines.
      - [[licos.json.engine.processing.LobbyProcessingEngine `LobbyProcessingEngine`]]
      - [[licos.json.engine.processing.VillageProcessingEngine `VillageProcessingEngine`]]
    - [[licos.json.engine.analysis `licos.json.engine.analysis`]] and its sub-packages contain LiCOS's JSON analysis engines.
      - [[licos.json.engine.analysis.lobby `licos.json.engine.analysis.lobby`]] contains LiCOS's JSON analysis engines for lobby such as
        [[licos.json.engine.analysis.lobby.client2server.AdvancedSearchAnalysisEngine `AdvancedSearchAnalysisEngine`]].
      - [[licos.json.engine.analysis.village `licos.json.engine.analysis.village`]] contains LiCOS's JSON analysis engines for village such as
        [[licos.json.engine.analysis.village.client2server.BoardAnalysisEngine `BoardAnalysisEngine`]].
  - [[licos.json.element.lobby `licos.json.element.lobby`]] contains LiCOS's JSON entities for lobby such as
    [[licos.json.element.lobby.client2server.JsonAdvancedSearch `JsonAdvancedSearch`]].
  - [[licos.json.element.village `licos.json.element.village`]] contains LiCOS's JSON entities for village such as
    [[licos.json.element.village.JsonAvatar `JsonAvatar`]].

== How to use ==

{{{
//TODO: Define the contractor as you like.
class VillageBox(intParameter: Int, stringParameter: String) extends BOX

class ChatFromServerAE extends ChatAnalysisEngine {
  override def process(box: BOX, chatFromServer: JsonChatFromServer): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class ErrorFromServerAE extends licos.json.engine.analysis.village.server2client.ErrorAnalysisEngine {
  override def process(box: BOX, error: JsonError): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class FlavorTextAE extends FlavorTextAnalysisEngine {
  override def process(box: BOX, flavorText: JsonFlavorText): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class GameResultAE extends GameResultAnalysisEngine {
  override def process(box: BOX, gameResult: JsonGameResult): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class PhaseAE extends PhaseAnalysisEngine {
  override def process(box: BOX, phase: JsonPhase): Either[JsValue, JsValue] = {
    box match {
      case x: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class NextGameInvitationAE extends NextGameInvitationAnalysisEngine {
  override def process(box: BOX,
                       nextGameInvitation: JsonNextGameInvitation): Either[JsValue, JsValue] = {
    box match {
      case _: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

class NextGameInvitationIsClosedAE extends NextGameInvitationIsClosedAnalysisEngine {

  override def process(box: BOX,
                       nextGameInvitationIsClosed: JsonNextGameInvitationIsClosed): Either[JsValue, JsValue] = {
    box match {
      case _: VillageBox =>
      //TODO: Write here.
        Right(...)
      case _ =>
      //TODO: Write here.
        Left(...)
    }
  }
}

object Runner extends App {
  private val processingEngineFactory: VillageProcessingEngineFactory = SpecificProcessingEngineFactory.
    create(VillagePE).
    asInstanceOf[VillageProcessingEngineFactory].
    set(new ChatFromServerAE()).
    set(new PhaseAE()).
    set(new FlavorTextAE()).
    set(new GameResultAE()).
    set(new NextGameInvitationAE()).
    set(new NextGameInvitationIsClosedAE()).
    set(new ErrorFromServerAE())

  private val processingEngine: VillageProcessingEngine = processingEngineFactory.create

  private val aJSONExampleOfTheLiCOSProtocol: String = {
    val source: BufferedSource = Source.fromURL("https://raw.githubusercontent.com/ktr-skmt/werewolfworld/gh-pages/village/example/0.3/server2client/firstMorning.jsonld")
    val json: String = source.getLines().mkString("\n")
    source.close()
    json
  }

  private val anExampleOfBOX: BOX = new VillageBox(3, "test")

  processingEngine.process(anExampleOfBOX, aJSONExampleOfTheLiCOSProtocol) match {
    case Right(jsValue: JsValue) =>
      println("Send a response:")
      println(Json.prettyPrint(jsValue))
    case Left(jsValue: JsValue) =>
      println("Send no response")
      println(Json.prettyPrint(jsValue))
  }

}
}}}